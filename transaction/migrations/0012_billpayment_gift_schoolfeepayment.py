# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('pricing', '0002_auto_20150526_2127'),
        ('recipient', '0002_auto_20150524_2158'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('transaction', '0011_auto_20150621_0123'),
    ]

    operations = [
        migrations.CreateModel(
            name='BillPayment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('state', models.CharField(default=b'INIT', help_text=b'State of the transaction.', max_length=4, verbose_name=b'State', choices=[(b'INIT', b'initialized'), (b'INFO', b'gatering information'), (b'REDY', b'ready for payment'), (b'PAID', b'paid'), (b'PROC', b'processed'), (b'CANC', b'cancelled'), (b'INVD', b'invalid')])),
                ('reference_number', models.CharField(help_text=b'6-digit reference number given to the customer to refer to transaction in case of problems', max_length=6, verbose_name=b'Reference Number')),
                ('service_charge', models.FloatField(help_text=b'Service charge of the transaction in USD', null=True, verbose_name=b'Service charge in USD', blank=True)),
                ('amount_usd', models.FloatField(help_text=b'Cost of the transaction in USD.        This could be the cost of the service or product we pay for        on behalf of the sender.', null=True, verbose_name=b'Cost of transaction in USD', blank=True)),
                ('amount_ghs', models.FloatField(help_text=b'Cost of the transaction in GHS.', null=True, verbose_name=b'Cost of transaction in GHS', blank=True)),
                ('payment_processor', models.CharField(blank=True, help_text=b'Payment Processor used', max_length=4, verbose_name=b'Payment Processor', choices=[(b'PAYP', b'paypal'), (b'STRP', b'stripe'), (b'WPAY', b'wepay')])),
                ('payment_reference', models.CharField(help_text=b'Reference generated by payment processor', max_length=50, verbose_name=b'Payment Reference', blank=True)),
                ('last_changed', models.DateTimeField(help_text=b'Last changed', verbose_name=b'Last changed', auto_now_add=True)),
                ('account_number', models.CharField(help_text=b'Account number', max_length=20, verbose_name=b'Account number', blank=True)),
                ('bill_type', models.CharField(help_text=b'Type of bill', max_length=3, verbose_name=b'Type of bill', choices=[(b'ECG', b'ECG (electricity)'), (b'GWC', b'GWC (water)'), (b'DST', b'DSTv'), (b'GOT', b'GOTv'), (b'SRF', b'surfline'), (b'VOB', b'Vodafone broadband')])),
                ('exchange_rate', models.ForeignKey(related_name='transaction_billpayment', to='pricing.ExchangeRate', help_text=b'Exchange rate applied to this transaction', null=True)),
                ('recipient', models.ForeignKey(related_name='transaction_billpayment', to='recipient.Recipient', help_text=b'Recipient associated with that transaction')),
                ('sender', models.ForeignKey(related_name='transaction_billpayment', to=settings.AUTH_USER_MODEL, help_text=b'Sender associated with that transaction')),
            ],
            options={
                'ordering': ['-last_changed'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('state', models.CharField(default=b'INIT', help_text=b'State of the transaction.', max_length=4, verbose_name=b'State', choices=[(b'INIT', b'initialized'), (b'INFO', b'gatering information'), (b'REDY', b'ready for payment'), (b'PAID', b'paid'), (b'PROC', b'processed'), (b'CANC', b'cancelled'), (b'INVD', b'invalid')])),
                ('reference_number', models.CharField(help_text=b'6-digit reference number given to the customer to refer to transaction in case of problems', max_length=6, verbose_name=b'Reference Number')),
                ('service_charge', models.FloatField(help_text=b'Service charge of the transaction in USD', null=True, verbose_name=b'Service charge in USD', blank=True)),
                ('amount_usd', models.FloatField(help_text=b'Cost of the transaction in USD.        This could be the cost of the service or product we pay for        on behalf of the sender.', null=True, verbose_name=b'Cost of transaction in USD', blank=True)),
                ('amount_ghs', models.FloatField(help_text=b'Cost of the transaction in GHS.', null=True, verbose_name=b'Cost of transaction in GHS', blank=True)),
                ('payment_processor', models.CharField(blank=True, help_text=b'Payment Processor used', max_length=4, verbose_name=b'Payment Processor', choices=[(b'PAYP', b'paypal'), (b'STRP', b'stripe'), (b'WPAY', b'wepay')])),
                ('payment_reference', models.CharField(help_text=b'Reference generated by payment processor', max_length=50, verbose_name=b'Payment Reference', blank=True)),
                ('last_changed', models.DateTimeField(help_text=b'Last changed', verbose_name=b'Last changed', auto_now_add=True)),
                ('bill_type', models.CharField(help_text=b'Type of gift', max_length=4, verbose_name=b'Type of gift', choices=[(b'CAKE', b'cake'), (b'FLOW', b'flowers'), (b'BASK', b'gift basket'), (b'MISC', b'something else')])),
                ('delivery_address', models.CharField(help_text=b'Delivery address', max_length=500, verbose_name=b'Delivery address', blank=True)),
                ('delivery_time', models.DateTimeField(help_text=b'Delivery date and time', verbose_name=b'Delivery date and time', blank=True)),
                ('additional_info', models.CharField(help_text=b'Anything else we should know, e.g.         occasion, special requests.', max_length=500, verbose_name=b'Additional information', blank=True)),
                ('exchange_rate', models.ForeignKey(related_name='transaction_gift', to='pricing.ExchangeRate', help_text=b'Exchange rate applied to this transaction', null=True)),
                ('recipient', models.ForeignKey(related_name='transaction_gift', to='recipient.Recipient', help_text=b'Recipient associated with that transaction')),
                ('sender', models.ForeignKey(related_name='transaction_gift', to=settings.AUTH_USER_MODEL, help_text=b'Sender associated with that transaction')),
            ],
            options={
                'ordering': ['-last_changed'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SchoolFeePayment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('state', models.CharField(default=b'INIT', help_text=b'State of the transaction.', max_length=4, verbose_name=b'State', choices=[(b'INIT', b'initialized'), (b'INFO', b'gatering information'), (b'REDY', b'ready for payment'), (b'PAID', b'paid'), (b'PROC', b'processed'), (b'CANC', b'cancelled'), (b'INVD', b'invalid')])),
                ('reference_number', models.CharField(help_text=b'6-digit reference number given to the customer to refer to transaction in case of problems', max_length=6, verbose_name=b'Reference Number')),
                ('service_charge', models.FloatField(help_text=b'Service charge of the transaction in USD', null=True, verbose_name=b'Service charge in USD', blank=True)),
                ('amount_usd', models.FloatField(help_text=b'Cost of the transaction in USD.        This could be the cost of the service or product we pay for        on behalf of the sender.', null=True, verbose_name=b'Cost of transaction in USD', blank=True)),
                ('amount_ghs', models.FloatField(help_text=b'Cost of the transaction in GHS.', null=True, verbose_name=b'Cost of transaction in GHS', blank=True)),
                ('payment_processor', models.CharField(blank=True, help_text=b'Payment Processor used', max_length=4, verbose_name=b'Payment Processor', choices=[(b'PAYP', b'paypal'), (b'STRP', b'stripe'), (b'WPAY', b'wepay')])),
                ('payment_reference', models.CharField(help_text=b'Reference generated by payment processor', max_length=50, verbose_name=b'Payment Reference', blank=True)),
                ('last_changed', models.DateTimeField(help_text=b'Last changed', verbose_name=b'Last changed', auto_now_add=True)),
                ('ward_name', models.CharField(help_text=b'Name of ward', max_length=100, verbose_name=b'Name of ward or student', blank=True)),
                ('school', models.CharField(help_text=b'Name of school or university', max_length=100, verbose_name=b'Name of school', blank=True)),
                ('additional_info', models.CharField(help_text=b'Anything else required to know about        the payment, e.g. hall, class, student id', max_length=500, verbose_name=b'Additional information', blank=True)),
                ('exchange_rate', models.ForeignKey(related_name='transaction_schoolfeepayment', to='pricing.ExchangeRate', help_text=b'Exchange rate applied to this transaction', null=True)),
                ('recipient', models.ForeignKey(related_name='transaction_schoolfeepayment', to='recipient.Recipient', help_text=b'Recipient associated with that transaction')),
                ('sender', models.ForeignKey(related_name='transaction_schoolfeepayment', to=settings.AUTH_USER_MODEL, help_text=b'Sender associated with that transaction')),
            ],
            options={
                'ordering': ['-last_changed'],
                'abstract': False,
            },
            bases=(models.Model,),
        ),
    ]
